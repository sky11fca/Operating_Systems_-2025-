IO FILES WITH POSIX API AND STDLIB.H



When it comes to C: There are only 2 categories of IO operations being:
POSIX API:
- SYSCALLS wrappers that call linux kernel operations.
- Grants acces to the linux kernel to do operations 
- UNIX OS LIKE ONLY 

STLIB:
- Already configured high level functions
- Can be used no matter the operating system
- May be limiting


POSIX API SYSTEM CALLS:
- CREATING FILES:
	-mknod: Creates a device
	-mkfifo: Creates a FIFO file 
	-mkdir: Creates a directory
	-link: Creates a link 
	-symlink: Creates an alias
	-creat: Creates a file 
	-socket: Creates a socket (You must know it from Computer Networks now)
- DELETING FILES:
	-rmdir: Deletes a directory
	-unlink: Deletes a file (Normal, Link, Alias, Device, Socket, FIFO)
- RENAME FILES: 
	-rename: Self explainatory
- CONSULTING THE FILE I-NODE (Check properties: REFER TO STAT COMMAND):
	-stat 
	-fstat 
	-lstat 
	-access 
- MODIFY FILE'S I-NODE:
	-chmod
	-fchmod
	-chown
	-fchown
	-lchown
- EXTENDING THE FILE SYSTEM:
	-mount 
	-umount
- IO FILE OPERATIONS:
	-open: Opens the file 
	-read: Reads the contents of the file 
	-write: Writes a string of characters to a file 
	-lseek: Positions the current pointer of the file 
	-close: Closes the file 
	-fcntl: puts a lock in a selected portion of the file 
- DUPLICATING A SESSION:
	-dup 
	-dup2 
- CONSULTING THE WORKING SESSION STATE:
	- select 
	-poll 
- TRUNCATING FILE CONTENTS 
	-truncate 
	-ftruncate
- MODIFY ATTRIBUTES:
	-chdir: Changes the current working directory (C version of CD command)
	-umask: Mask certain file permissions
	-chroot: Changes the current root fs 
- LOCKING:
	-flock: Creates the lock 
	-fcntl: Setup the lock 
- MAPPING A FILE TO MEMORY:
	-mmap
- COMMUNICATION BETWEEN PARRENT AND CHILD PROCESS VIA PIPELINE:
	-pipe 
- etc...


In case of an error, these function call always return -1 and a variable errno (errno.h) that can be diagnosed with perror()

ACCESS()
-SYNTAX:
	int access(char* path, int permissions)
WHERE:
	-path: char* -> String that should contain an existing path to an existing file 
	-permissions: int -> predefined global variable that describe permissions, can be the following:
		-X_OK: Executing
		-W_OK: Writing
		-R_OK: Reading
		-F_OK: File exists 
RETURNS:
	-0: file exists and has acces 
	- (-1): otherwise 


CREAT()
SYNTAX: 
	int creat(char* path, mode_t permissions)
WHERE:
	-path -> path to an existing file 
	-permissions -> specify what permissions may have
-SHOULD CREATE A FILE IN THAT SPECIFIED PATH WITH SPECIFIED PERMISSIONS TO ACCESS IT.
RETURN:
	-the value of newly added file descriptor
	-(-1): otherwise 

!!! we can create the same result with open: open(path, O_WRONLY|O_CREAT|O_TRUNC, permissions) !!!

OPEN()
SYNTAX:
	int open(char* path, int acces_type, mode_t permissions)

WHERE:
	-access_type:
		-O_RDONLY, O_WRONLY, O_RDWR
		-O_APPEND, O_CREAT, O_TRUNC, ...
RETURNS: a file descriptor, or -1

READ()

SYNTAX:
	int read(int fd, char* buffer, size_t nr_bytes);
RETURNS: The ne of read bytes or -1

WRITE() (I believe you know what this function does.)

LSEEK()

SYNTAX:
	long lseek(int fd, off_t offset, int mode_off);
WHERE:
	offset: nr of bytes to set from a point 
	mode_off: the said point, where:
		-SEEK_SET: Begining of the file 
		-SEEK_CUR: The current position of the pointer 
		-SEEK_END: The end of the file.
RETUNRS: the new offset or -1


CLOSE()...


IO SYSTEMCALLS FOR DIRECTORIES:
-MKDIR: int mkdir(char* path, mode_t permissions) -> Returns 0 or -1
-GETCWD: Returns the current working directory 
-CHDIR: int chdir(char* path) -> return 0 or -1
WOEKING WITH DIRECTORIES FUNCTIONS:
	-opendir 
	-readdit 
	-closedir 
	-rewinddir 
	-seekdir 
	-telldir
	-scandir


HOW TO WORK WITH FILES:

-Open the file: create a file descriptor 
-Read contents from the file 
-Do the necessary operations 
-Write the result in another file 
-Close files 


HOW TO WORK WITH DIRECTORIES:
-Open the directory 
-Read all the entries from the directory 
-Close directory 

EXAMPLE:

DIR* df;
struct dirent* entry 

df = opendir(path)

while((entry = readdit(dd))!=NULL)
{
	//necessary operations with the entry with the name entry->d_name
}
